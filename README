Работа по заданию:
1) Создаем в kernel/ mutex.h и mutex.c
2) В mutex.h прописываем структуру мьютекса
3) В mutex.c реализуем функции ядра для мьютекса
    mutex_init - для инициализации таблицы
    sys_cmutex - функ. создающая мьютекс
    sys_rmutex - функ. освобождения
    sys_lock - функ. блокировки
    sys_unlock - функ. разблокировки
4) Добавляем системные вызовы в kernel/syscall.h
    #define SYS_cmutex 22
    #define SYS_rmutex 23
    #define SYS_lock   24
    #define SYS_unlock 25
5)  Добавляем в kernel/syscall.c

    extern uint64 sys_lock(void);
    extern uint64 sys_unlock(void);
    extern uint64 sys_cmutex(void);
    extern uint64 sys_rmutex(void);
    
    ...

    static uint64 (*syscalls[])(void) = {
        ...
    [SYS_cmutex]  sys_cmutex,
    [SYS_rmutex]  sys_rmutex,
    [SYS_lock]    sys_lock,
    [SYS_unlock]  sys_unlock
    };

6) Объявляем в user/user.h:
    int cmutex(void);
    int rmutex(int);
    int lock(int);
    int unlock(int);

7) Добавляем в user/usys.pl
    entry("cmutex");
    entry("rmutex");
    entry("lock");
    entry("unlock");

8) Добавим в param.h глобальные переменные - 
    #define NMUTEX       64
    #define NMUTEXPROC   16
9) Проинициализируем mutex defs.h
10) Добавим таблицу mutex в proc.h 
11) Зайдем в proc.c и добавим изменения в fork(), exit(), и procinit()
12) Добавим инициализацию mutexinit в kernel/main.c
13) Создаем user/mutex_test.c и no_mutex_test.c для Тестирования (объявим их в Makefile)
14) Также в Makefile добавим 
    OBJS = \
        ...
        ...
      $K/mutex.o //это в конец

15) Проверяем


-------------------------------------------
<<СП Д/З No3 Синхронизация процессов Операционные системы, весна 2024

(1) Разработать набор системных вызовов, предоставляющих пользователю функционал синхронизации процессов посредством блокировок с приостановкой, подобных мьютексам:
• создание мьютекса возвращает его дескриптор или отрицательное значение при ошибке;
• блокировка мьютекса по его дескриптору - возвращает 0 при успехе, отрицательное число при ошибке;
• разблокировка мьютекса по его дескриптору - возвращает 0 при успехе, отрицательное число при ошибке;
• освобождение (закрытие, уничтожение) мьютекса по его дескриптору с предварительным снятием блокировки (если она была)- возвращает 0 при успехе, отрицательное число при ошибке.

Вести в ядре глобальную статическую таблицу мьютексов (используемых и неиспользуемых), защищенную спин-локом (блокировать его при создании и освобождении мьютекса; можно иметь отдельный лок для каждого мьютекса). Мьютекс внутри себя должен содержать слип-блокировку, ответственную за функционал мьютекса, и счетсик количества открытых дескрипторов данного мьютекса. Таблицу инициализировать при загрузке ОС.

Для каждого процессе вести таблицу используемых (открытых) дескрипторов мьютексов в виде ссылок на глобальную таблицу мьютексов. При создании мьютекса выделить неиспользуемый элемент таблицы. Модифицировать вызов fork так, чтобы он изменял значение счетчика процессов, использующих мьютекс, соответственно. Вызов exit также следует дополнить автоматическим закрытием всех задействованных дескрипторов мьюеткса процесса - освобождением ресурсов. После того, как мьютекс оказывается неиспользуемым ни одним процесмсом, он считается уничтоженным (в глобальной таблице интерпретируется как неиспользуемый).

Альтернативно можно последовать принципу «все есть файл»: создавать и открывать мьютексы как файловые дескрипторы, модифицировать вызовы close, write и read соответственно.

(2) Написать тестовую программу, которая обменивается строкой между двумя процессами по паре каналов, по одному для каждого направления.

• Родительский процесс должен отправить первый параметр командной строки дочернему процессу и закрыть вывод канала.
• Дочерний процесс должен побайтово (посимвольно) считать строку с канала и для каждого байта сразу вывести строку вида pid: received 'c', где pid - идентификатор его (дочернего) процесса, а с - полученный символ; сразу же передать байт обратно родительскому процессу в канал и, по достижении конца входного канала, закрыть канал вывода и выйти.
• Родительский процесс должен получить байты от дочернего, для каждого байта сразу же напечатать pid: received 'c' (аналогично дочернему, но со своим pid) и выйти. Проверить, что без использования синхронизации - блокировки консоли - информация, параллельно выводимая процессами, перемешивается.

Реализовать блокировку вывода на консоль посредством мьютексов из задачи (1) и убедиться, что информация выводится без перемешивания, каждая строчка отдельная (хотя порядок строк может быть разный от запуска к запуску, это корректно).

(в решении иметь две версии утилиты с блокировкой и без.)
--------------

xv6 is a re-implementation of Dennis Ritchie's and Ken Thompson's Unix
Version 6 (v6).  xv6 loosely follows the structure and style of v6,
but is implemented for a modern RISC-V multiprocessor using ANSI C.

ACKNOWLEDGMENTS

xv6 is inspired by John Lions's Commentary on UNIX 6th Edition (Peer
to Peer Communications; ISBN: 1-57398-013-7; 1st edition (June 14,
2000)).  See also https://pdos.csail.mit.edu/6.1810/, which provides
pointers to on-line resources for v6.

The following people have made contributions: Russ Cox (context switching,
locking), Cliff Frey (MP), Xiao Yu (MP), Nickolai Zeldovich, and Austin
Clements.

We are also grateful for the bug reports and patches contributed by
Takahiro Aoyagi, Marcelo Arroyo, Silas Boyd-Wickizer, Anton Burtsev,
carlclone, Ian Chen, Dan Cross, Cody Cutler, Mike CAT, Tej Chajed,
Asami Doi,Wenyang Duan, eyalz800, Nelson Elhage, Saar Ettinger, Alice
Ferrazzi, Nathaniel Filardo, flespark, Peter Froehlich, Yakir Goaron,
Shivam Handa, Matt Harvey, Bryan Henry, jaichenhengjie, Jim Huang,
Matúš Jókay, John Jolly, Alexander Kapshuk, Anders Kaseorg, kehao95,
Wolfgang Keller, Jungwoo Kim, Jonathan Kimmitt, Eddie Kohler, Vadim
Kolontsov, Austin Liew, l0stman, Pavan Maddamsetti, Imbar Marinescu,
Yandong Mao, Matan Shabtay, Hitoshi Mitake, Carmi Merimovich, Mark
Morrissey, mtasm, Joel Nider, Hayato Ohhashi, OptimisticSide,
phosphagos, Harry Porter, Greg Price, RayAndrew, Jude Rich, segfault,
Ayan Shafqat, Eldar Sehayek, Yongming Shen, Fumiya Shigemitsu, snoire,
Taojie, Cam Tenny, tyfkda, Warren Toomey, Stephen Tu, Alissa Tung,
Rafael Ubal, Amane Uehara, Pablo Ventura, Xi Wang, WaheedHafez,
Keiichi Watanabe, Lucas Wolf, Nicolas Wolovick, wxdao, Grant Wu, x653,
Jindong Zhang, Icenowy Zheng, ZhUyU1997, and Zou Chang Wei.

ERROR REPORTS

Please send errors and suggestions to Frans Kaashoek and Robert Morris
(kaashoek,rtm@mit.edu).  The main purpose of xv6 is as a teaching
operating system for MIT's 6.1810, so we are more interested in
simplifications and clarifications than new features.

BUILDING AND RUNNING XV6

You will need a RISC-V "newlib" tool chain from
https://github.com/riscv/riscv-gnu-toolchain, and qemu compiled for
riscv64-softmmu.  Once they are installed, and in your shell
search path, you can run "make qemu".
